// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Composition {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public partial class ExportDefinition {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ExportDefinition DefaultInstance = GetDefaultTemplate();
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String contractName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableDictionary<System.String, System.Object> metadata;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ExportDefinition class.</summary>
		protected ExportDefinition(
			System.Int32 identity,
			System.String contractName,
			System.Collections.Immutable.ImmutableDictionary<System.String, System.Object> metadata,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
			this.contractName = contractName;
			this.metadata = metadata;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ExportDefinition Create(
			System.String contractName,
			System.Collections.Immutable.ImmutableDictionary<System.String, System.Object> metadata) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				contractName: Optional.For(contractName),
				metadata: Optional.For(metadata),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String ContractName {
			get { return this.contractName; }
		}
	
		public System.Collections.Immutable.ImmutableDictionary<System.String, System.Object> Metadata {
			get { return this.metadata; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ExportDefinition With(
			ImmutableObjectGraph.Optional<System.String> contractName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>>)) {
			return (ExportDefinition)this.WithCore(
				contractName: contractName,
				metadata: metadata);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ExportDefinition WithCore(
			ImmutableObjectGraph.Optional<System.String> contractName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				contractName: Optional.For(contractName.GetValueOrDefault(this.ContractName)),
				metadata: Optional.For(metadata.GetValueOrDefault(this.Metadata)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ExportDefinition WithFactory(
			ImmutableObjectGraph.Optional<System.String> contractName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.String, System.Object>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(contractName.IsDefined && contractName.Value != this.ContractName) || 
				(metadata.IsDefined && metadata.Value != this.Metadata)) {
				return new ExportDefinition(
					identity: identity.GetValueOrDefault(this.Identity),
					contractName: contractName.GetValueOrDefault(this.ContractName),
					metadata: metadata.GetValueOrDefault(this.Metadata));
			} else {
				return this;
			}
		}
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ExportDefinition whose fields are initialized with default values.</summary>
		private static ExportDefinition GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ExportDefinition(
				default(System.Int32),
				template.ContractName,
				template.Metadata,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String ContractName { get; set; }
	
			internal System.Collections.Immutable.ImmutableDictionary<System.String, System.Object> Metadata { get; set; }
		}
	}
}


